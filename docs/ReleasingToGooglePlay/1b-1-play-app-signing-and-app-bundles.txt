play app signing, key/certificate/keystore definitions, android app bundles
see https://developer.android.com/studio/publish/app-signing

all APKs need to be signed before they're allowed to be installed or updated

Google offers 'Play App Signing' which uses 2 keys/certificates:
  see https://developer.android.com/studio/publish/app-signing#app-signing-google-play
  upload key
    used to sign the APK (or app bundle: see android app bundles section in this file) by the developer before uploading to the Google Play Store (i.e. releasing the initial version)
    the job of signing new versions of the app after it's been released is then handled by Google using the other key, the app signing key
    the upload key can be reset if lost/compromised
  app signing key
    used to sign APKs already on users' devices
    never changes throughout the app's lifetime

managing the app without 'Play App Signing'
  see: https://developer.android.com/studio/publish/app-signing#opt-out
  uses only one key, an app signing key
    the key is used for signing the app before initial release and then also for future updates
    losing/compromising this key means losing the ability to update the app
    Google provides a way of converting to 'Play App Signing' - until then, this key would be used as both the 'upload key' and 'app signing key'
    no access to android app bundles, play feature delivery, and play asset delivery
    see link for implementation

key, certificate, and key store definitions
  see https://developer.android.com/studio/publish/app-signing#certificates-keystores
  
  i.   public key certificate
         .pem/.der file
         aka digital certificate/identity certificate
         contains public key and metadata identifying the owner of the corresponding private key
         the certificate is generated by the 'app signing key'
         signing tool attaches the certificate to the app
         the certificate associates the APK with the developer and the corresponding private key
         the certificate is used to authenticate app updates
         every app uses the same certificate throughout its lifetime in order for users to install updates for it + more reasons
           see https://developer.android.com/studio/publish/app-signing#considerations
                              
  ii.  certificate fingerprint
         API providers may ask for a 'certificate fingerprint' along with the APK name if an app needs to use an API
         a certificate fingerprint is a short unique id for a certificate
        
  iii. java keystore
         .jks/.keystore file
         binary file containing certificates and private keys

  iv.  play encrypt private key (pepk)
         this is a tool used to export private keys from a java keystore and encrypt them for transfer to Google Play (then used for generating app signing certificates)
         

android app bundles 
  this is a way of publishing the app so that the job of both building an APK and signing it is done by Google
  the app bundle is used to make and distribute optimized APKs for different devices
  see https://developer.android.com/guide/app-bundle